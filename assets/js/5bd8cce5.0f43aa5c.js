"use strict";(self.webpackChunkcibi_general_documentation=self.webpackChunkcibi_general_documentation||[]).push([[3138],{4891:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"code-docs/restful-api/api-architecture","title":"\ud83d\ude80 Vertical Slice Architecture in .NET 9","description":"\ud83d\udccc Introduction","source":"@site/docs/code-docs/restful-api/api-architecture.md","sourceDirName":"code-docs/restful-api","slug":"/code-docs/restful-api/api-architecture","permalink":"/CIBI_General_Documentation/docs/code-docs/restful-api/api-architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/RusselG21/CIBI_General_Documentation/docs/code-docs/restful-api/api-architecture.md","tags":[],"version":"current","frontMatter":{},"sidebar":"CodeDocSidebar","previous":{"title":"\ud83d\udd0d OCR-API: Document Extraction System","permalink":"/CIBI_General_Documentation/docs/code-docs/OCR/dev-documentation"},"next":{"title":"\ud83d\udcd8 Code Documentation","permalink":"/CIBI_General_Documentation/docs/code-docs/soap-api/intro"}}');var i=r(4848),s=r(8453);const a={},o="\ud83d\ude80 Vertical Slice Architecture in .NET 9",c={},d=[{value:"\ud83d\udccc Introduction",id:"-introduction",level:2},{value:"\ud83d\udce6 Required Packages and Explanations",id:"-required-packages-and-explanations",level:2},{value:"\ud83d\udce5 Install Required Packages",id:"-install-required-packages",level:3},{value:"\ud83d\udd25 <strong>Carter</strong>",id:"-carter",level:3},{value:"\ud83d\udce2 <strong>MediatR &amp; MediatR.Extensions.Microsoft.DependencyInjection</strong>",id:"-mediatr--mediatrextensionsmicrosoftdependencyinjection",level:3},{value:"\ud83d\udd04 <strong>Mapster &amp; Mapster.DependencyInjection</strong>",id:"-mapster--mapsterdependencyinjection",level:3},{value:"\ud83c\udfd7 <strong>Entity Framework Core</strong>",id:"-entity-framework-core",level:3},{value:"\u26a1 <strong>Dapper</strong>",id:"-dapper",level:3},{value:"\ud83d\udcca <strong>Serilog.AspNetCore</strong>",id:"-serilogaspnetcore",level:3},{value:"\u2705 <strong>FluentAssertions &amp; XUnit</strong>",id:"-fluentassertions--xunit",level:3},{value:"\ud83d\udcc2 Folder Structure",id:"-folder-structure",level:2},{value:"\ud83c\udfc1 Conclusion",id:"-conclusion",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-vertical-slice-architecture-in-net-9",children:"\ud83d\ude80 Vertical Slice Architecture in .NET 9"})}),"\n",(0,i.jsx)(n.h2,{id:"-introduction",children:"\ud83d\udccc Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Vertical Slice Architecture is a way of structuring applications by focusing on features rather than layers. Instead of dividing the project into traditional horizontal layers (Controllers, Services, Repositories, etc.), we organize it by features, making it more modular, maintainable, and scalable."}),"\n",(0,i.jsx)(n.p,{children:"In this guide, we will build a .NET 9 project using Vertical Slice Architecture. We will use:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\ud83d\udccc ",(0,i.jsx)(n.strong,{children:"Entity Framework Core"})," for writing data"]}),"\n",(0,i.jsxs)(n.li,{children:["\u26a1 ",(0,i.jsx)(n.strong,{children:"Dapper"})," for reading data"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udce2 ",(0,i.jsx)(n.strong,{children:"MediatR"})," with ",(0,i.jsx)(n.strong,{children:"IPipelineBehavior"})," for request handling and error logging"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"Carter"})," for Minimal APIs"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,i.jsx)(n.strong,{children:"Mapster"})," for mapping DTOs"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"XUnit"})," and ",(0,i.jsx)(n.strong,{children:"FluentAssertions"})," for testing"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, we will centralize all package dependencies into a separate ",(0,i.jsx)(n.strong,{children:"Building Blocks"})," project for better maintainability and to facilitate microservices transition."]}),"\n",(0,i.jsx)(n.h2,{id:"-required-packages-and-explanations",children:"\ud83d\udce6 Required Packages and Explanations"}),"\n",(0,i.jsx)(n.h3,{id:"-install-required-packages",children:"\ud83d\udce5 Install Required Packages"}),"\n",(0,i.jsx)(n.p,{children:"To install all necessary packages, run the following CLI command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:" dotnet add package Carter\n dotnet add package MediatR\n dotnet add package MediatR.Extensions.Microsoft.DependencyInjection\n dotnet add package Mapster\n dotnet add package Mapster.DependencyInjection\n dotnet add package Microsoft.EntityFrameworkCore\n dotnet add package Microsoft.EntityFrameworkCore.SqlServer\n dotnet add package Dapper\n dotnet add package Serilog.AspNetCore\n dotnet add package XUnit\n dotnet add package FluentAssertions\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"-carter",children:["\ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"Carter"})]}),"\n",(0,i.jsx)(n.p,{children:"A library for creating Minimal APIs in .NET with more flexibility."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class OrderModule : CarterModule\n{\n    public OrderModule() : base("/orders")\n    {\n        Get("/", async (IMediator mediator) => await mediator.Send(new GetOrdersQuery()));\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"-mediatr--mediatrextensionsmicrosoftdependencyinjection",children:["\ud83d\udce2 ",(0,i.jsx)(n.strong,{children:"MediatR & MediatR.Extensions.Microsoft.DependencyInjection"})]}),"\n",(0,i.jsx)(n.p,{children:"Implements the CQRS pattern and enables handlers for request/response patterns."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class CreateOrderCommand : IRequest<int>\n{\n    public string ProductName { get; set; }\n    public int Quantity { get; set; }\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"-mapster--mapsterdependencyinjection",children:["\ud83d\udd04 ",(0,i.jsx)(n.strong,{children:"Mapster & Mapster.DependencyInjection"})]}),"\n",(0,i.jsx)(n.p,{children:"Used for mapping DTOs to entities efficiently."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class MappingProfiles : IRegister\n{\n    public void Register(TypeAdapterConfig config)\n    {\n        config.NewConfig<Order, OrderDto>();\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"-entity-framework-core",children:["\ud83c\udfd7 ",(0,i.jsx)(n.strong,{children:"Entity Framework Core"})]}),"\n",(0,i.jsx)(n.p,{children:"For writing data and managing database operations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class AppDbContext : DbContext\n{\n    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }\n    public DbSet<Order> Orders { get; set; }\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"-dapper",children:["\u26a1 ",(0,i.jsx)(n.strong,{children:"Dapper"})]}),"\n",(0,i.jsx)(n.p,{children:"Lightweight ORM for optimized read operations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class DapperContext\n{\n    private readonly IConfiguration _configuration;\n    public DapperContext(IConfiguration configuration) => _configuration = configuration;\n\n    public IDbConnection CreateConnection() => new SqlConnection(_configuration.GetConnectionString("DefaultConnection"));\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"-serilogaspnetcore",children:["\ud83d\udcca ",(0,i.jsx)(n.strong,{children:"Serilog.AspNetCore"})]}),"\n",(0,i.jsx)(n.p,{children:"Logging middleware for request tracing and error handling."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class LoggingMiddleware\n{\n    private readonly RequestDelegate _next;\n    public LoggingMiddleware(RequestDelegate next) => _next = next;\n\n    public async Task Invoke(HttpContext context, ILogger<LoggingMiddleware> logger)\n    {\n        logger.LogInformation("Handling request: {Path}", context.Request.Path);\n        await _next(context);\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"-fluentassertions--xunit",children:["\u2705 ",(0,i.jsx)(n.strong,{children:"FluentAssertions & XUnit"})]}),"\n",(0,i.jsx)(n.p,{children:"For unit testing with fluent syntax."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class OrderTests\n{\n    [Fact]\n    public void Should_Create_Order()\n    {\n        var order = new Order { ProductName = "Laptop", Quantity = 1 };\n        order.Should().NotBeNull();\n        order.ProductName.Should().Be("Laptop");\n        order.Quantity.Should().Be(1);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-folder-structure",children:"\ud83d\udcc2 Folder Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\ud83d\udcc2 MyProject\n \u2523 \ud83d\udcc2 src\n \u2503 \u2523 \ud83d\udcc2 Features\n \u2503 \u2503 \u2523 \ud83d\udcc2 Orders\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2 CreateOrder\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc CreateOrderCommand.cs\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc CreateOrderHandler.cs\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc CreateOrderEndpoint.cs\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2 UpdateOrder\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc UpdateOrderCommand.cs\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc UpdateOrderHandler.cs\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc UpdateOrderEndpoint.cs\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2 DeleteOrder\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc DeleteOrderCommand.cs\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc DeleteOrderHandler.cs\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc DeleteOrderEndpoint.cs\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2 GetOrders\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc GetOrdersQuery.cs\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc GetOrdersHandler.cs\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc GetOrdersEndpoint.cs\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc OrderDto.cs\n \u2503 \u2503 \u2523 \ud83d\udcc2 Products (New Feature)\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2 CreateProduct\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc CreateProductCommand.cs\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc CreateProductHandler.cs\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc CreateProductEndpoint.cs\n \u2503 \u2523 \ud83d\udcc2 Infrastructure\n \u2503 \u2503 \u2523 \ud83d\udcc2 Persistence\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc AppDbContext.cs\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc DapperContext.cs\n \u2503 \u2503 \u2523 \ud83d\udcc2 Logging\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc LoggingMiddleware.cs\n \u2503 \u2503 \u2523 \ud83d\udcdc DependencyInjection.cs\n \u2503 \u2523 \ud83d\udcc2 API\n \u2503 \u2503 \u2523 \ud83d\udcdc Program.cs\n \u2523 \ud83d\udcc2 BuildingBlocks\n \u2503 \u2523 \ud83d\udcdc BuildingBlocks.csproj (All package references)\n \u2523 \ud83d\udcc2 tests\n \u2503 \u2523 \ud83d\udcc2 FeatureTests\n \u2503 \u2503 \u2523 \ud83d\udcdc OrderTests.cs\n \u2503 \u2503 \u2523 \ud83d\udcdc ProductTests.cs (New Feature Test)\n \u2503 \u2523 \ud83d\udcdc Tests.csproj\n \u2523 \ud83d\udcdc README.md\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-conclusion",children:"\ud83c\udfc1 Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"To make this project robust and scalable:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Follow Vertical Slice Architecture"})," to keep features modular and maintainable."]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udce2 ",(0,i.jsx)(n.strong,{children:"Use MediatR for CQRS"})," to separate commands and queries."]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83c\udfd7 ",(0,i.jsx)(n.strong,{children:"Centralize dependencies in Building Blocks"})," for easier microservices transition."]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"Leverage EF Core for writing and Dapper for optimized reads"})," for best performance."]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udcca ",(0,i.jsx)(n.strong,{children:"Implement structured logging with Serilog"})," to track requests and errors."]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Write unit tests using XUnit & FluentAssertions"})," to ensure system reliability."]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83c\udfd7 ",(0,i.jsx)(n.strong,{children:"Use Dependency Injection for better maintainability and testing."})]}),"\n",(0,i.jsxs)(n.li,{children:["\u26a1 ",(0,i.jsx)(n.strong,{children:"Consider implementing caching mechanisms"})," like Redis to improve performance."]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udea8 ",(0,i.jsx)(n.strong,{children:"Ensure proper error handling and middleware"})," to handle exceptions gracefully."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By following these principles, this project will be robust, maintainable, and ready for scaling into microservices if needed."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);