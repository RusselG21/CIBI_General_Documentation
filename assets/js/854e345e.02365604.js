"use strict";(self.webpackChunkcibi_general_documentation=self.webpackChunkcibi_general_documentation||[]).push([[3924],{5134:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"general-knowledge/Code-Review-Automation/Code-Style-Guide","title":"Code-Style-Guide","description":"StyleCop Configuration","source":"@site/docs/general-knowledge/Code-Review-Automation/Code-Style-Guide.md","sourceDirName":"general-knowledge/Code-Review-Automation","slug":"/general-knowledge/Code-Review-Automation/Code-Style-Guide","permalink":"/CIBI_General_Documentation/docs/general-knowledge/Code-Review-Automation/Code-Style-Guide","draft":false,"unlisted":false,"editUrl":"https://github.com/RusselG21/CIBI_General_Documentation/docs/general-knowledge/Code-Review-Automation/Code-Style-Guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"GeneralKnowledgeDocSidebar","previous":{"title":"Implementation","permalink":"/CIBI_General_Documentation/docs/general-knowledge/Code-Review-Automation/Instruction"},"next":{"title":"Secure HTTP Headers in ASP.NET Core","permalink":"/CIBI_General_Documentation/docs/general-knowledge/Http-Header/Header"}}');var r=l(4848),o=l(8453);const t={},s="",a={},c=[{value:"StyleCop Configuration",id:"stylecop-configuration",level:2},{value:"Sample Code Violating the Rules",id:"sample-code-violating-the-rules",level:4},{value:"Correct Approach",id:"correct-approach",level:5},{value:"Roslyn Analyzer Settings",id:"roslyn-analyzer-settings",level:2},{value:"\u2699\ufe0f dotnet_style_qualification_for_field",id:"\ufe0f-dotnet_style_qualification_for_field",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule",level:4},{value:"Correct Approach",id:"correct-approach-1",level:6},{value:"\u2699\ufe0f dotnet_style_qualification_for_property",id:"\ufe0f-dotnet_style_qualification_for_property",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-1",level:4},{value:"Correct Approach",id:"correct-approach-2",level:5},{value:"\u2699\ufe0f dotnet_style_qualification_for_method",id:"\ufe0f-dotnet_style_qualification_for_method",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-2",level:4},{value:"Correct Approach",id:"correct-approach-3",level:5},{value:"\u2699\ufe0f dotnet_style_qualification_for_event",id:"\ufe0f-dotnet_style_qualification_for_event",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-3",level:4},{value:"Correct Approach",id:"correct-approach-4",level:5},{value:"\u2699\ufe0f dotnet_style_predefined_type_for_locals_parameters_members",id:"\ufe0f-dotnet_style_predefined_type_for_locals_parameters_members",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-4",level:4},{value:"Correct Approach",id:"correct-approach-5",level:5},{value:"\u2699\ufe0f dotnet_style_predefined_type_for_member_access",id:"\ufe0f-dotnet_style_predefined_type_for_member_access",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-5",level:4},{value:"Correct Approach",id:"correct-approach-6",level:5},{value:"\u2699\ufe0f dotnet_style_object_initializer",id:"\ufe0f-dotnet_style_object_initializer",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-6",level:4},{value:"Correct Approach",id:"correct-approach-7",level:5},{value:"\u2699\ufe0f dotnet_style_collection_initializer",id:"\ufe0f-dotnet_style_collection_initializer",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-7",level:4},{value:"Correct Approach",id:"correct-approach-8",level:5},{value:"\u2699\ufe0f dotnet_style_explicit_tuple_names",id:"\ufe0f-dotnet_style_explicit_tuple_names",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-8",level:4},{value:"Correct Approach",id:"correct-approach-9",level:5},{value:"\u2699\ufe0f dotnet_style_coalesce_expression",id:"\ufe0f-dotnet_style_coalesce_expression",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-9",level:4},{value:"Correct Approach",id:"correct-approach-10",level:5},{value:"\u2699\ufe0f dotnet_style_null_propagation",id:"\ufe0f-dotnet_style_null_propagation",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-10",level:4},{value:"Correct Approach",id:"correct-approach-11",level:5},{value:"\u2699\ufe0f dotnet_style_prefer_is_null_check_over_reference_equality_method",id:"\ufe0f-dotnet_style_prefer_is_null_check_over_reference_equality_method",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-11",level:4},{value:"Correct Approach",id:"correct-approach-12",level:5},{value:"C# Code Style Preferences",id:"c-code-style-preferences",level:3},{value:"\u2699\ufe0f csharp_prefer_braces",id:"\ufe0f-csharp_prefer_braces",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-12",level:4},{value:"Correct Approach",id:"correct-approach-13",level:5},{value:"\u2699\ufe0f csharp_style_allow_embedded_statements_on_same_line",id:"\ufe0f-csharp_style_allow_embedded_statements_on_same_line",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-13",level:4},{value:"Correct Approach",id:"correct-approach-14",level:5},{value:"\u2699\ufe0f csharp_style_expression_bodied_methods",id:"\ufe0f-csharp_style_expression_bodied_methods",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-14",level:4},{value:"Correct Approach",id:"correct-approach-15",level:5},{value:"\u2699\ufe0f csharp_style_expression_bodied_constructors",id:"\ufe0f-csharp_style_expression_bodied_constructors",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-15",level:4},{value:"Correct Approach",id:"correct-approach-16",level:5},{value:"\u2699\ufe0f csharp_style_expression_bodied_operators",id:"\ufe0f-csharp_style_expression_bodied_operators",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-16",level:4},{value:"Correct Approach",id:"correct-approach-17",level:5},{value:"\u2699\ufe0f csharp_style_expression_bodied_properties",id:"\ufe0f-csharp_style_expression_bodied_properties",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-17",level:4},{value:"Correct Approach",id:"correct-approach-18",level:5},{value:"\u2699\ufe0f csharp_style_expression_bodied_indexers",id:"\ufe0f-csharp_style_expression_bodied_indexers",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-18",level:4},{value:"Correct Approach",id:"correct-approach-19",level:5},{value:"\u2699\ufe0f csharp_style_expression_bodied_accessors",id:"\ufe0f-csharp_style_expression_bodied_accessors",level:3},{value:"Sample Code Violating the Rule",id:"sample-code-violating-the-rule-19",level:4},{value:"Correct Approach",id:"correct-approach-20",level:5}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",header:"header",hr:"hr",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:""})}),"\n",(0,r.jsx)(n.h2,{id:"stylecop-configuration",children:"StyleCop Configuration"}),"\n",(0,r.jsx)(n.p,{children:"StyleCop is a static code analysis tool that enforces a set of style and consistency rules for C# code. Below are the settings used in our StyleCop configuration for YourCompanyName:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "settings": {\n    "documentationRules": {\n      "companyName": "YourCompanyName",\n      "documentExposedElements": true,\n      "documentInternalElements": true,\n      "documentPrivateElements": true,\n      "documentInterfaces": true,\n      "documentConstructors": true,\n      "documentEvents": true,\n      "documentFields": true,\n      "documentProperties": true,\n      "documentMethods": true\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rules",children:"Sample Code Violating the Rules"}),"\n",(0,r.jsx)(n.p,{children:"Below is an example of code that violates the StyleCop rules:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class SampleClass\n{\n    public int publicField;\n    private string privateField;\n\n    public SampleClass()\n    {\n        // Constructor\n    }\n\n    public void PublicMethod()\n    {\n        // Method\n    }\n\n    private void PrivateMethod()\n    {\n        // Method\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach",children:"Correct Approach"}),"\n",(0,r.jsx)(n.p,{children:"Here is the corrected version of the code adhering to the StyleCop rules:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'/// <summary>\n/// Represents a sample class.\n/// </summary>\npublic class SampleClass\n{\n    /// <summary>\n    /// A public field.\n    /// </summary>\n    public int publicField;\n\n    /// <summary>\n    /// A private field.\n    /// </summary>\n    private string privateField;\n\n    /// <summary>\n    /// Initializes a new instance of the <see cref="SampleClass"/> class.\n    /// </summary>\n    public SampleClass()\n    {\n        // Constructor\n    }\n\n    /// <summary>\n    /// A public method.\n    /// </summary>\n    public void PublicMethod()\n    {\n        // Method\n    }\n\n    /// <summary>\n    /// A private method.\n    /// </summary>\n    private void PrivateMethod()\n    {\n        // Method\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h1,{id:"code-style-and-formatting-rules",children:"Code Style and Formatting Rules"}),"\n",(0,r.jsx)(n.h2,{id:"roslyn-analyzer-settings",children:"Roslyn Analyzer Settings"}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-dotnet_style_qualification_for_field",children:"\u2699\ufe0f dotnet_style_qualification_for_field"}),"\n",(0,r.jsxs)(n.p,{children:["This rule requires explicit ",(0,r.jsx)(n.code,{children:"this."})," for field access to improve code readability and maintainability."]}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"dotnet_style_qualification_for_field"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class QualificationExample\n{\n    private int field;\n\n    public void Method()\n    {\n        field = 10;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h6,{id:"correct-approach-1",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"dotnet_style_qualification_for_field"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class QualificationExample\n{\n    private int field;\n\n    public void Method()\n    {\n        this.field = 10;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-dotnet_style_qualification_for_property",children:"\u2699\ufe0f dotnet_style_qualification_for_property"}),"\n",(0,r.jsxs)(n.p,{children:["This rule requires explicit ",(0,r.jsx)(n.code,{children:"this."})," for property access to improve code readability and maintainability."]}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-1",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"dotnet_style_qualification_for_property"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class QualificationPropertyExample\n{\n    public int Property { get; set; }\n\n    public void Method()\n    {\n        Property = 10;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-2",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"dotnet_style_qualification_for_property"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class QualificationPropertyExample\n{\n    public int Property { get; set; }\n\n    public void Method()\n    {\n        this.Property = 10;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-dotnet_style_qualification_for_method",children:"\u2699\ufe0f dotnet_style_qualification_for_method"}),"\n",(0,r.jsxs)(n.p,{children:["This rule requires explicit ",(0,r.jsx)(n.code,{children:"this."})," for method calls to improve code readability and maintainability."]}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-2",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"dotnet_style_qualification_for_method"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class QualificationMethodExample\n{\n    public void Method()\n    {\n        AnotherMethod();\n    }\n\n    private void AnotherMethod()\n    {\n        // Method implementation\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-3",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"dotnet_style_qualification_for_method"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class QualificationMethodExample\n{\n    public void Method()\n    {\n        this.AnotherMethod();\n    }\n\n    private void AnotherMethod()\n    {\n        // Method implementation\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-dotnet_style_qualification_for_event",children:"\u2699\ufe0f dotnet_style_qualification_for_event"}),"\n",(0,r.jsxs)(n.p,{children:["This rule requires explicit ",(0,r.jsx)(n.code,{children:"this."})," for event access to improve code readability and maintainability."]}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-3",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"dotnet_style_qualification_for_event"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class QualificationEventExample\n{\n    public event EventHandler MyEvent;\n\n    public void Method()\n    {\n        MyEvent?.Invoke(this, EventArgs.Empty);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-4",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"dotnet_style_qualification_for_event"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class QualificationEventExample\n{\n    public event EventHandler MyEvent;\n\n    public void Method()\n    {\n        this.MyEvent?.Invoke(this, EventArgs.Empty);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-dotnet_style_predefined_type_for_locals_parameters_members",children:"\u2699\ufe0f dotnet_style_predefined_type_for_locals_parameters_members"}),"\n",(0,r.jsxs)(n.p,{children:["This rule prefers predefined types (e.g., ",(0,r.jsx)(n.code,{children:"int"})," over ",(0,r.jsx)(n.code,{children:"Int32"}),") for locals, parameters, and members to improve code readability and consistency."]}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-4",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"dotnet_style_predefined_type_for_locals_parameters_members"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class PredefinedTypeExample\n{\n    public void Method()\n    {\n        System.Int32 x = 10;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-5",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"dotnet_style_predefined_type_for_locals_parameters_members"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class PredefinedTypeExample\n{\n    public void Method()\n    {\n        int x = 10;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-dotnet_style_predefined_type_for_member_access",children:"\u2699\ufe0f dotnet_style_predefined_type_for_member_access"}),"\n",(0,r.jsx)(n.p,{children:"This rule prefers predefined types for member access to improve code readability and consistency."}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-5",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"dotnet_style_predefined_type_for_member_access"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class PredefinedTypeMemberAccessExample\n{\n    public void Method()\n    {\n        System.Int32 x = System.Int32.MaxValue;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-6",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"dotnet_style_predefined_type_for_member_access"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class PredefinedTypeMemberAccessExample\n{\n    public void Method()\n    {\n        int x = int.MaxValue;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-dotnet_style_object_initializer",children:"\u2699\ufe0f dotnet_style_object_initializer"}),"\n",(0,r.jsx)(n.p,{children:"This rule encourages the use of object initializers to improve code readability and maintainability."}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-6",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"dotnet_style_object_initializer"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ObjectInitializerExample\n{\n    public void Method()\n    {\n        var obj = new SampleClass();\n        obj.Property = 10;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-7",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"dotnet_style_object_initializer"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ObjectInitializerExample\n{\n    public void Method()\n    {\n        var obj = new SampleClass { Property = 10 };\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-dotnet_style_collection_initializer",children:"\u2699\ufe0f dotnet_style_collection_initializer"}),"\n",(0,r.jsx)(n.p,{children:"This rule encourages the use of collection initializers to improve code readability and maintainability."}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-7",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"dotnet_style_collection_initializer"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class CollectionInitializerExample\n{\n    public void Method()\n    {\n        var list = new List<int>();\n        list.Add(1);\n        list.Add(2);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-8",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"dotnet_style_collection_initializer"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class CollectionInitializerExample\n{\n    public void Method()\n    {\n        var list = new List<int> { 1, 2 };\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-dotnet_style_explicit_tuple_names",children:"\u2699\ufe0f dotnet_style_explicit_tuple_names"}),"\n",(0,r.jsx)(n.p,{children:"This rule prefers explicit tuple element names to improve code readability and maintainability."}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-8",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"dotnet_style_explicit_tuple_names"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class TupleNamesExample\n{\n    public void Method()\n    {\n        var tuple = (1, "example");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-9",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"dotnet_style_explicit_tuple_names"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class TupleNamesExample\n{\n    public void Method()\n    {\n        var tuple = (Id: 1, Name: "example");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-dotnet_style_coalesce_expression",children:"\u2699\ufe0f dotnet_style_coalesce_expression"}),"\n",(0,r.jsxs)(n.p,{children:["This rule encourages the use of the null-coalescing operator (",(0,r.jsx)(n.code,{children:"??"}),") to improve code readability and maintainability."]}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-9",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"dotnet_style_coalesce_expression"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class CoalesceExpressionExample\n{\n    public void Method(string input)\n    {\n        string result = input != null ? input : "default";\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-10",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"dotnet_style_coalesce_expression"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class CoalesceExpressionExample\n{\n    public void Method(string input)\n    {\n        string result = input ?? "default";\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-dotnet_style_null_propagation",children:"\u2699\ufe0f dotnet_style_null_propagation"}),"\n",(0,r.jsxs)(n.p,{children:["This rule encourages the use of the null-conditional operator (",(0,r.jsx)(n.code,{children:"?."}),") to improve code readability and maintainability."]}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-10",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"dotnet_style_null_propagation"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class NullPropagationExample\n{\n    public void Method(SampleClass obj)\n    {\n        if (obj != null)\n        {\n            obj.Method();\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-11",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"dotnet_style_null_propagation"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class NullPropagationExample\n{\n    public void Method(SampleClass obj)\n    {\n        obj?.Method();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-dotnet_style_prefer_is_null_check_over_reference_equality_method",children:"\u2699\ufe0f dotnet_style_prefer_is_null_check_over_reference_equality_method"}),"\n",(0,r.jsxs)(n.p,{children:["This rule prefers the use of ",(0,r.jsx)(n.code,{children:"is null"})," over reference equality to improve code readability and maintainability."]}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-11",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"dotnet_style_prefer_is_null_check_over_reference_equality_method"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class IsNullCheckExample\n{\n    public void Method(SampleClass obj)\n    {\n        if (obj == null)\n        {\n            // Do something\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-12",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"dotnet_style_prefer_is_null_check_over_reference_equality_method"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class IsNullCheckExample\n{\n    public void Method(SampleClass obj)\n    {\n        if (obj is null)\n        {\n            // Do something\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"c-code-style-preferences",children:"C# Code Style Preferences"}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-csharp_prefer_braces",children:"\u2699\ufe0f csharp_prefer_braces"}),"\n",(0,r.jsxs)(n.p,{children:["This rule requires braces ",(0,r.jsx)(n.code,{children:"{}"})," for control blocks to improve code readability and maintainability."]}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-12",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"csharp_prefer_braces"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class BracesExample\n{\n    public void Method(bool condition)\n    {\n        if (condition)\n            Console.WriteLine("Condition met");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-13",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"csharp_prefer_braces"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class BracesExample\n{\n    public void Method(bool condition)\n    {\n        if (condition)\n        {\n            Console.WriteLine("Condition met");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-csharp_style_allow_embedded_statements_on_same_line",children:"\u2699\ufe0f csharp_style_allow_embedded_statements_on_same_line"}),"\n",(0,r.jsx)(n.p,{children:"This rule disallows single-line control statements to improve code readability and maintainability."}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-13",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"csharp_style_allow_embedded_statements_on_same_line"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class EmbeddedStatementsExample\n{\n    public void Method(bool condition)\n    {\n        if (condition) Console.WriteLine("Condition met");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-14",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"csharp_style_allow_embedded_statements_on_same_line"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class EmbeddedStatementsExample\n{\n    public void Method(bool condition)\n    {\n        if (condition)\n        {\n            Console.WriteLine("Condition met");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-csharp_style_expression_bodied_methods",children:"\u2699\ufe0f csharp_style_expression_bodied_methods"}),"\n",(0,r.jsx)(n.p,{children:"This rule prefers block bodies for methods to improve code readability and maintainability."}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-14",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"csharp_style_expression_bodied_methods"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ExpressionBodiedMethodsExample\n{\n    public int Add(int a, int b) => a + b;\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-15",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"csharp_style_expression_bodied_methods"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ExpressionBodiedMethodsExample\n{\n    public int Add(int a, int b)\n    {\n        return a + b;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-csharp_style_expression_bodied_constructors",children:"\u2699\ufe0f csharp_style_expression_bodied_constructors"}),"\n",(0,r.jsx)(n.p,{children:"This rule prefers block bodies for constructors to improve code readability and maintainability."}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-15",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"csharp_style_expression_bodied_constructors"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class ExpressionBodiedConstructorsExample\n{\n    public ExpressionBodiedConstructorsExample() => Console.WriteLine("Constructor");\n}\n'})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-16",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"csharp_style_expression_bodied_constructors"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public class ExpressionBodiedConstructorsExample\n{\n    public ExpressionBodiedConstructorsExample()\n    {\n        Console.WriteLine("Constructor");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-csharp_style_expression_bodied_operators",children:"\u2699\ufe0f csharp_style_expression_bodied_operators"}),"\n",(0,r.jsx)(n.p,{children:"This rule prefers block bodies for operators to improve code readability and maintainability."}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-16",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"csharp_style_expression_bodied_operators"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ExpressionBodiedOperatorsExample\n{\n    public static ExpressionBodiedOperatorsExample operator +(ExpressionBodiedOperatorsExample a, ExpressionBodiedOperatorsExample b) => new ExpressionBodiedOperatorsExample();\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-17",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"csharp_style_expression_bodied_operators"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ExpressionBodiedOperatorsExample\n{\n    public static ExpressionBodiedOperatorsExample operator +(ExpressionBodiedOperatorsExample a, ExpressionBodiedOperatorsExample b)\n    {\n        return new ExpressionBodiedOperatorsExample();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-csharp_style_expression_bodied_properties",children:"\u2699\ufe0f csharp_style_expression_bodied_properties"}),"\n",(0,r.jsx)(n.p,{children:"This rule prefers expression-bodied properties to improve code readability and maintainability."}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-17",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"csharp_style_expression_bodied_properties"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ExpressionBodiedPropertiesExample\n{\n    private int _value;\n\n    public int Value\n    {\n        get { return _value; }\n        set { _value = value; }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-18",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"csharp_style_expression_bodied_properties"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ExpressionBodiedPropertiesExample\n{\n    public int Value { get; set; }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-csharp_style_expression_bodied_indexers",children:"\u2699\ufe0f csharp_style_expression_bodied_indexers"}),"\n",(0,r.jsx)(n.p,{children:"This rule prefers expression-bodied indexers to improve code readability and maintainability."}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-18",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"csharp_style_expression_bodied_indexers"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ExpressionBodiedIndexersExample\n{\n    private int[] _values = new int[10];\n\n    public int this[int index]\n    {\n        get { return _values[index]; }\n        set { _values[index] = value; }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-19",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"csharp_style_expression_bodied_indexers"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ExpressionBodiedIndexersExample\n{\n    private int[] _values = new int[10];\n\n    public int this[int index]\n    {\n        get => _values[index];\n        set => _values[index] = value;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-csharp_style_expression_bodied_accessors",children:"\u2699\ufe0f csharp_style_expression_bodied_accessors"}),"\n",(0,r.jsx)(n.p,{children:"This rule prefers expression-bodied accessors to improve code readability and maintainability."}),"\n",(0,r.jsx)(n.h4,{id:"sample-code-violating-the-rule-19",children:"Sample Code Violating the Rule"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of code that violates the ",(0,r.jsx)(n.code,{children:"csharp_style_expression_bodied_accessors"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ExpressionBodiedAccessorsExample\n{\n    private int _value;\n\n    public int Value\n    {\n        get { return _value; }\n        set { _value = value; }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"correct-approach-20",children:"Correct Approach"}),"\n",(0,r.jsxs)(n.p,{children:["Here is the corrected version of the code adhering to the ",(0,r.jsx)(n.code,{children:"csharp_style_expression_bodied_accessors"})," rule:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public class ExpressionBodiedAccessorsExample\n{\n    public int Value { get; set; }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>t,x:()=>s});var i=l(6540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);